# vim:expandtab:shiftwidth=8:tabstop=8:softtabstop=8:ft=gitconfig
[user]
        email = mail@tuandzung.me
        name = Ngo Tuan Dzung
        signingkey = ~/.ssh/keys/personal_ed25519.pub

[gpg]
        format = ssh

[commit]
        gpgsign = true

[core]
        editor = nvim
        pager = delta --pager='ov -F'
        autocrlf = false
        whitespace = trailing-space,space-before-tab,tab-in-indent,cr-at-eol

[pager]
        show = delta --features ov-diff
        diff = delta --features ov-diff
        log = delta --features ov-log

[interactive]
        diffFilter = delta --color-only

[delta]
        navigate = true  # use n and N to move between diff sections
        syntax-theme = "catppuccin"
        features = decorations
        # Show line number & Two side
        side-by-side = true
        line-numbers = true
        # Style of whitespace error
        whitespace-error-style = red reverse

[delta "decorations"]
        commit-decoration-style = bold blue box ul
        file-style = bold blue ul
        file-decoration-style = green ul
        minus-style = syntax "#563f51"
        minus-emph-style = syntax "#895768"
        minus-empty-line-marker-style = syntax magenta
        plus-style = syntax "#455450"
        plus-emph-style = syntax "#658168"
        plus-empty-line-marker-style = syntax cyan
        hunk-header-decoration-style = box ul
        hunk-header-file-style = bold
        hunk-header-line-number-style = bold "#a5adcb"
        hunk-header-style = file line-number syntax
        line-numbers-left-style = "#6e738d"
        line-numbers-minus-style = bold "#ed8796"
        line-numbers-plus-style = bold "#a6da95"
        line-numbers-right-style = "#6e738d"
        line-numbers-zero-style = "#6e738d"

[delta "ov-diff"]
        pager = ov -F --section-delimiter '^(commit|added:|removed:|renamed:|Δ)' --section-header --pattern '•'
[delta "ov-log"]
        pager = ov -F --section-delimiter '^(commit|\\* commit|\\* \\w{7})' --section-header-num 1

[merge]
        conflictstyle = zdiff3

[diff]
        tool = nvimdiff
        colorMoved = default
        noprefix = true
        algorithm = histogram

[diff "sopsdiffer"]
        # A differ for secret encoded
        textconv = sops -d
[diff "json"]
        # A differ for json file
        textconv = "jq ."

[difftool "nvimdiff"]
        # Nvim diff 2 files
        cmd = "nvim -d $LOCAL $REMOTE"

[mergetool "nvimdiff"]
        # Nvim diff 4 files
        cmd = "nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'"

[push]
        # Only push current branch to same name branch
        default = current
        followTags = true

[gc]
        # Don't auto git gc, with large project can slow when working
        auto = 0

[init]
        defaultBranch = main

[alias]
        # Get main branch
        main = "!_() { git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'; }; _"
        # Graph log view
        graph = log --graph --abbrev-commit
        # Meaning stash
        snapshot = !git stash save "Snapshot: $(date)"
        # Rename stash
        stash-rename = "!_() { rev=$(git rev-parse $1) && git stash drop $1 || exit 1 ; git diff-index --quiet HEAD; s=$?; [ $s != 0 ] && git stash save \"tmp stash from stash-rename\"; git stash apply $rev && shift && git stash save \"$@\" && [ $s != 0 ] && git stash pop stash@{1}; }; _"
        # Find commits with source code
        find-source = "!_() { git log --pretty=format:'%C(yellow)%h %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; _"
        # Find commits with message
        find-message = "!_() { git log --pretty=format:'%C(yellow)%h %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; _"
        # Find branches containing commit
        find-branch = "!_() { git branch -a --contains $1; }; _"
        # Stop tracking a file that already in staged but keep in worktree
        stop-track = "!_() { git update-index --assume-unchanged $1; }; _"
        # Redo above
        track = "!_() { git update-index --no-assume-unchanged $1; }; _"
        # Keep independent version file forever
        keep-forever = "!_() { git update-index --skip-worktree $1; }; _"
        # Redo above
        stop-keep-forever = "!_() { git update-index --no-skip-worktree $1; }; _"
        # Show root level directory
        root = "!_() { git rev-parse --show-toplevel; }; _"
        # Show file with conflicts
        conflicts = "!_() { git ls-files -u | awk '{print $4}' | sort -u; }; _"
        # Delete dangling commits
        delete-dangling = "!_() { git reflog expire --expire=now --all; git gc --prune=now; }; _"
        # Delete merged branch
        delete-merged = "!_() { git branch --merged | grep -v $(git main) | grep -v develop | xargs git branch -d; }; _"
        # Submodule clean
        submodule-clean = "!_() { git submodule update --init --recursive && git submodule foreach --recursive 'git reset --hard' && git submodule foreach --recursive 'git clean -fd' }; _"
        # Update main branch
        update-main = !bash ~/.config/git/helper.sh update_main

[includeIf "gitdir/i:~/Working/**"]
        # Include config file from enterprise project
        path = ~/Working/.gitconfig

# Enforce SSH
[url "git@github.com:"]
        insteadOf = https://github.com/

[url "git@gitlab.com:"]
        insteadOf = https://gitlab.com/
